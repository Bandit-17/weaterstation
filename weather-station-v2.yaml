substitutions:
  
  name: weather_station
  tx_pin_uart0: GPIO17
  rx_pin_uart0: GPIO16
  modbus_adress: '1'
  modbus_adress2: '2'
  modbus_adress3: '3'
  modbus_adress4: '4'  
  baudrate: '9600'
  updates: 5s
  
  tx_pin_uart1: GPIO18
  rx_pin_uart1: GPIO19
  baudrate1: '9600'
  
  
esphome:
  name: ${name}
  
  includes:
#    - include/tx23_custom_sensor.h


  libraries:
#    - "https://github.com/egzumer/Arduino-LaCrosse-TX23-Library"

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: 2.0.11 #2.0.5 2.0.9
    platform_version: 6.3.2 #4.4.0 6.2.0

external_components:
  - source: github://SeByDocKy/myESPhome/
    components: [veml6075]
    refresh: 0s
  - source: github://SeByDocKy/myESPhome/
    components: [statistics]
    refresh: 0s


# Enable logging
logger:
  #level: DEBUG
  #level: verbose
  baud_rate: 0

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  password: "dc092ad97d8485b76da5d7412da86816"

wifi:
  networks:
  - ssid: !secret esphome_ssid
    password: !secret esphome_password
  - ssid: !secret esphome2_ssid
    password: !secret esphome2_password
  power_save_mode: high
  output_power: 8.5db

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "weather-station Fallback Hotspot"
    password: "Bandit17"

time:

  - platform: homeassistant
    id: homeassistant_time  
    
    on_time:

      - seconds: 59
        minutes: 59
        hours: 23     

        then:  
        - globals.set:
            id: ${name}_vitesse_vent_max_global
            value: '0' 
        
        - globals.set:
            id: ${name}_velocite_vent_max_global
            value: '0' 
      
      
      - seconds: 0
        minutes: /5    
        then: 
         - light.turn_off: ${name}_led5
  

 
#          - sensor.template.publish:
#              id: template_yesteday_rain
#              state: !lambda return id(daily_rain).state;

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO23
    num_leds: 5
    rgb_order: GRB #BRG
    name: ${name}_led
    id: ${name}_led    
  
  - platform: partition
    name: "status_led_1"
    id: ${name}_led1
    segments:
      - id: ${name}_led
        from: 0
        to: 0
  
  - platform: partition
    name: "status_led_2"
    id: ${name}_led2
    segments:
      - id: ${name}_led
        from: 1
        to: 1

  - platform: partition
    name: "status_led_3"
    id: ${name}_led3
    segments:
      - id: ${name}_led
        from: 2
        to: 2
  
  - platform: partition
    name: "status_led_4"
    id: ${name}_led4
    segments:
      - id: ${name}_led
        from: 3
        to: 3
  
  - platform: partition
    name: "status_led_5"
    id: ${name}_led5
    segments:
      - id: ${name}_led
        from: 4
        to: 4
               
    
globals:
  - id: ${name}_vitesse_vent_max_global
    type: float
    restore_value: yes

  - id: ${name}_velocite_vent_max_global
    type: float
    restore_value: yes



uart:
  - id: uart_0
    tx_pin: ${tx_pin_uart0}
    rx_pin: ${rx_pin_uart0}
    baud_rate: ${baudrate}
    stop_bits: 1
  # debug:
    # direction: BOTH 
  
  - id: uart_1
    tx_pin: ${tx_pin_uart1}
    rx_pin: ${rx_pin_uart1}
    baud_rate: ${baudrate1}
    
    # debug:
    # direction: BOTH 

  

i2c:
   - id: bus_a
     sda: GPIO21
     scl: GPIO22
     frequency: 100kHz
     scan: true

   - id: bus_b
     sda: GPIO25
     scl: GPIO26
     frequency: 400kHz
     scan: true
  
  

# spi:
  
#   clk_pin: GPIO14
#   mosi_pin: GPIO13
#   miso_pin: GPIO12

as3935_i2c: 
  i2c_id: bus_a
  
#as3935_spi:
  
#  cs_pin: GPIO15 
  id: as3935_id 
#  address: 0x03
  irq_pin:
    number: 32
    #mode: INPUT_PULLDOWN
  indoor: True
  noise_level: 2
  lightning_threshold: 1
  mask_disturber: false
  div_ratio: 0
  capacitance: 0
  watchdog_threshold: 2
  spike_rejection: 2  

modbus:
  #flow_control_pin: 23
  uart_id: uart_0
  send_wait_time: 200ms
  id: modbus_weather_station

modbus_controller:
  - id: ${name}
    ## the Modbus device addr1
    address: ${modbus_adress}
    modbus_id: modbus_weather_station
    command_throttle: 200ms
    setup_priority: -10
    update_interval: ${updates}

  - id: ${name}_anemometre
    ## the Modbus device addr2
    address: ${modbus_adress2}
    modbus_id: modbus_weather_station
    command_throttle: 1000ms
    setup_priority: -10
    update_interval: 1s
  
  - id: ${name}_girouette
    ## the Modbus device addr3
    address: ${modbus_adress3}
    modbus_id: modbus_weather_station
    command_throttle: 1000ms
    setup_priority: -10
    update_interval: 1s

  - id: ${name}_Temperature
    ## the Modbus device addr4
    address: ${modbus_adress4}
    modbus_id: modbus_weather_station
    command_throttle: 1000ms
    setup_priority: -10
    update_interval: 1s



binary_sensor:       
  - platform: status
    name: ${name}_status   

  - platform: as3935
    name: ${name}_Lightning Alert 

  # - platform: hydreon_rgxx
  #   hydreon_rgxx_id: "hydreon_1"
  #   too_cold:
  #     entity_category: diagnostic
  #     name: "Temperature Status"
  #   lens_bad:
  #     entity_category: diagnostic
  #     name: "Lens Status"
  #   em_sat:
  #     entity_category: diagnostic
  #     name: "Emitter Saturation"  

switch:
  - platform: restart
    name: "${name}"  

  - platform: template
    name: ${name}_disable
    optimistic: true
    on_turn_on:
      then:
        - lambda: |-
            esphome::veml6075::VEML6075Component *sen =  id(veml);
            sen->shutdown(true);
    on_turn_off:
      then:
        - lambda: |-
            esphome::veml6075::VEML6075Component *sen =  id(veml);
            sen->shutdown(false); 
    
sensor:
  - platform: uptime
    id: uptime_sec
############ pluviometre ###############
#  - platform: pulse_counter
#    pin:
#      number: GPIO4
#      inverted: True
#      mode: INPUT_PULLUP    
#    unit_of_measurement: 'mm'
#    update_interval: 2s
#    accuracy_decimals: 3
#    name: '${name}_compteur_pluviometre'
#    id: rain_meter
#    filters:
#      - multiply:  25 #0.0250 #0.367    #90/2.25ml om 90 est la valeur pour chaque bascule ave 2s et 2.25ml est le volume de chaque réservoir

#  - platform: total_daily_energy
#    name: "${name}_pluie_du_jour"
#    power_id: rain_meter  
#    unit_of_measurement: "mm"
#    accuracy_decimals: 3
#    id: daily_rain
#    icon: mdi:water
    
#  - platform: template
#    name: "${name}_pluie_veille"
#    id: template_yesteday_rain
#    unit_of_measurement: "mm"
#    accuracy_decimals: 3
#    icon: mdi:water
#    update_interval: 10s


########### BME280 ###################    
    
  - platform: bme280_i2c
    i2c_id: bus_a
    temperature:
      name: "${name}_temperature"
      oversampling: 16x
      id: ${name}_temperature
    pressure:
      name: "${name}_pression"
      id: ${name}_pression
    humidity:
      name: "${name}_humidite"
      id: ${name}_humidite
    address: 0x76
    update_interval: 5s
  - platform: template
    name: "${name}_Altitude"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(${name}_temperature).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(${name}_pression).state), 0.190234) - 1); // in meter
    update_interval: 5s
    icon: 'mdi:signal'
    unit_of_measurement: 'm'
  
#  - platform: template
#    name: "${name}_Point_de_rosee"
#    lambda: |-
#     return (243.5*(log(id(${name}_humidite).state/100)+((17.67*id(${name}_temperature).state)/
#     (243.5+id(${name}_temperature).state)))/(17.67-log(id(${name}_humidite).state/100)-
#      ((17.67*id(${name}_temperature).state)/(243.5+id(${name}_temperature).state))));
#   unit_of_measurement: °C
#   icon: 'mdi:thermometer-alert'

  - platform: bmp280
    i2c_id: bus_a
    temperature:
      name: "${name}_Outside Temperature"
      oversampling: 16x
    pressure:
      name: "${name}_Outside Pressure"
    address: 0x77
    update_interval: 60s
  
##########pyranomètre PRY20###########
  - platform: modbus_controller
    modbus_controller_id: ${name}
    id: ${name}_solar_radiation
    name: ${name}_solar_radiation
    address: 0x0000
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    icon: mdi:sun-wireless
    skip_updates: 1
    unit_of_measurement: "W/m²"

######annemomètre###############
  - platform: modbus_controller
    modbus_controller_id: ${name}_anemometre
    id: ${name}_velocite_vent
    name: "${name}_velocite_vent"
    unit_of_measurement: "m/s"
    address: 0x0000
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 2
    skip_updates: 1
    icon: mdi:wind-power-outline
    filters:
    - multiply: 0.1
    on_value: 
      then:
          - if:
              condition:
                and:
                  -  lambda: |-
                       return id(${name}_velocite_vent).state >= id(${name}_velocite_vent_max_global); 
              then:
                - globals.set: 
                     id: ${name}_velocite_vent_max_global
                     value: !lambda return ( id(${name}_velocite_vent_max_global) =  float( id(${name}_velocite_vent).state) );
 
  # - platform: template
  #   name: "${name}_velocite_vent"
  #   id: ${name}_velocite_vent
  #   unit_of_measurement: "m/s"
  #   accuracy_decimals: 2
  #   update_interval: 1s 
  #   icon: mdi:wind-power-outline
  #   lambda: return ( (id(${name}_retour_capteur).state) / (10) );
  #   on_value: 
  #     then:
  #         - if:
  #             condition:
  #               and:
  #                 -  lambda: |-
  #                      return id(${name}_velocite_vent).state >= id(${name}_velocite_vent_max_global); 
  #             then:
  #               - globals.set: 
  #                    id: ${name}_velocite_vent_max_global
  #                    value: !lambda return ( id(${name}_velocite_vent_max_global) =  float( id(${name}_velocite_vent).state) );    

  - platform: template
    name: "${name}_vitesse vent"
    id: ${name}_vitesse_vent
    unit_of_measurement: "km/h"
    accuracy_decimals: 2
    update_interval: 1s
    icon: mdi:wind-power
    lambda: return ( (id(${name}_velocite_vent).state) * (3.6) ); 
    on_value: 
      then:
          - if:
              condition:
                and:
                  -  lambda: |-
                       return id(${name}_vitesse_vent).state >= id(${name}_vitesse_vent_max_global); 
              then:
                - globals.set: 
                     id: ${name}_vitesse_vent_max_global
                     value: !lambda return ( id(${name}_vitesse_vent_max_global) =  float( id(${name}_vitesse_vent).state) );    
   
  - platform: template
    name: ${name}_vitesse_vent_max
    id: template_${name}_vitesse_vent_max
    unit_of_measurement: "km/h"
    accuracy_decimals: 2
    icon: mdi:wind-turbine-alert
    update_interval: 1s
    lambda: |-
      return (id(template_${name}_vitesse_vent_max).state = id(${name}_vitesse_vent_max_global));
    
  - platform: statistics
    name: ${name}_vitesse_vent_max_st
    id: template_${name}_vitesse_vent_max_st
    entity_id: ${name}_vitesse_vent
    method: 'max'

  - platform: statistics
    name: ${name}_vitesse_vent_moy_st
    id: template_${name}_vitesse_vent_moy_st
    entity_id: ${name}_vitesse_vent
    method: 'mean'

  - platform: template
    name: ${name}_velocite_vent_max
    id: template_${name}_velocite_vent_max
    unit_of_measurement: "m/s"
    accuracy_decimals: 2
    icon: mdi:wind-turbine-alert
    update_interval: 1s
    lambda: |-
      return (id(template_${name}_velocite_vent_max).state = id(${name}_velocite_vent_max_global));


      
######### girouette ################     

  - platform: modbus_controller
    modbus_controller_id:  ${name}_girouette
    id: direction_cardinal
    name: ${name}_direction_cardinal
    address: 0x0000
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    skip_updates: 1 
    icon: mdi:angle-acute

  - platform: modbus_controller
    modbus_controller_id: ${name}_girouette 
    id: direction_degres
    name: ${name}_direction_en°
    address: 0x0001
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    unit_of_measurement: "°"
    skip_updates: 1 
    icon: mdi:compass-outline

#############  Température et Humidité ########################

  - platform: modbus_controller
    modbus_controller_id:  ${name}_Temperature
    id: humidite_ext
    name: ${name}_humidité_ext
    address: 0x0000
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    skip_updates: 1 
    unit_of_measurement: "%"
    icon: mdi:home-percent
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id:  ${name}_Temperature
    id: temperature_ext
    name: ${name}_température_ext
    address: 0x0001
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    skip_updates: 1 
    unit_of_measurement: "°C"
    icon: mdi:home-thermometer
    filters:
      - multiply: 0.1

  - platform: statistics
    name: ${name}_température_ext_max
    id: template_${name}_temperature_ext_max
    entity_id: temperature_ext
    method: 'max'
    icon: mdi:thermometer-plus
  
  - platform: statistics
    name: ${name}_température_ext_moy
    id: template_${name}_temperature_ext_moy
    entity_id: temperature_ext
    method: 'mean'
    icon: mdi:thermometer-lines

  - platform: statistics
    name: ${name}_température_ext_min
    id: template_${name}_temperature_ext_min
    entity_id: temperature_ext
    method: 'min'
    icon: mdi:thermometer-minus

########## TX23 #######################
#  - platform: custom
#    id: tx23_id
#    lambda: |-
#      auto TX23 = new TX23CustomSensor();
#      App.register_component(TX23);
#      return {TX23->speed_sensor, TX23->direction_sensor};
    #pin:
     # number: GPIO5
    
#    sensors:
#    - name: "station_meteo_vitesse_vent"
#      unit_of_measurement: "m/s"
#      accuracy_decimals: 1
#      icon: "mdi:weather-windy"
    
#    - name: "station_meteo_direction_vent"
#      unit_of_measurement: "°"
#      icon: "mdi:compass-outline"

################ BH1750 ###################
  - platform: bh1750
    i2c_id: bus_a
    name: "${name}_luminosite"
    address: 0x23
    update_interval: 5s

############ GEIGER #######################

  - platform: pulse_counter
    pin: GPIO36
    name: "${name}_compteur_geiger"
    update_interval: 15s
    id: "geiger_counter"
    unit_of_measurement: 'CPM'
    on_raw_value:
      sensor.template.publish:
        id: radiation_level
        state: !lambda 'return x / 123.15270935960591133004926108374;'# this was what I got for my data sheet and it matched reasonably well with the background data that I have.  Many people are using other values.
  - platform: template
    name: "Radiation Level"
    id: "radiation_level"
    unit_of_measurement: 'µSv/h'
    icon: mdi:radioactive
    accuracy_decimals: 5
########### VEML 6075 #####################
  - platform: veml6075
    i2c_id: bus_b
    update_interval: ${updates}
    id: veml
    rawuva:
      name: ${name}_rawuva
    rawuvb:
      name: ${name}_rawuvb
    visible_comp:
      name: ${name}_visible_comp
    ir_comp:
      name: ${name}_ir_comp
    uva:
      name: ${name}_uva
    uvb:
      name: ${name}_uvb
    uvindex:
      name: ${name}_uvindex
      id: ${name}_uvindex  
    dynamic: 'normal'  # 'normal'/'high'
    integration_time: '100ms' #'50ms'/'100ms'/'200ms'/'400ms'/'800ms'
    auto_force: 'disable' # 'disable' or 'one_or_uv'
    trigger: 'disable'  # 'disable' or 'one_or_uv'
    address: 0x10

  - platform: template
    name: ${name}_reg_00
    update_interval: ${updates}
    icon: mdi:numeric
    accuracy_decimals: 0 
    lambda: |-
       uint8_t value;
       esphome::veml6075::VEML6075Component *sen =  id(veml);
       return sen->read_reg_00();
  
  

  # - platform: custom
  #   lambda: |-
  #     auto veml6075 = new VEML6075CustomSensor();
  #     App.register_component(veml6075);
  #     return {veml6075->rawuva_sensor, veml6075->rawuvb_sensor , veml6075->visible_comp_sensor, veml6075->ir_comp_sensor , veml6075->uva_sensor, veml6075->uvb_sensor , veml6075->uvindex_sensor};
  #   sensors:
  #   - name: ${name}_rawuva
  #     unit_of_measurement: "µW/cm²"
  #     icon: mdi:sun-wireless
  #     accuracy_decimals: 0
  #   - name: ${name}_rawuvb
  #     unit_of_measurement: "µW/cm²"
  #     icon: mdi:sun-wireless
  #     accuracy_decimals: 0
  #   - name: ${name}_visible_comp
  #     unit_of_measurement: "µW/cm²"
  #     icon: mdi:sun-wireless
  #     accuracy_decimals: 0
  #   - name: ${name}_ir_comp
  #     unit_of_measurement: "µW/cm²"
  #     icon: mdi:sun-wireless
  #     accuracy_decimals: 0
  #   - name: ${name}_uva
  #     unit_of_measurement: "µW/cm²"
  #     icon: mdi:sun-wireless
  #     accuracy_decimals: 0
  #   - name: ${name}_uvb
  #     unit_of_measurement: "µW/cm²"
  #     icon: mdi:sun-wireless
  #     accuracy_decimals: 0 
  #   - name: ${name}_uvindex
  #     id: ${name}_uvindex
  #     unit_of_measurement: "mW/m²"
  #     accuracy_decimals: 2
  #     icon: mdi:numeric 
###########  Blizortung #######

  - platform: homeassistant
    name: "distance_eclaire"
    entity_id: sensor.blitzortung_lightning_distance
    id: distance_eclaire 

###########  AS 3935 #########

  - platform: as3935
    lightning_energy:
      name: ${name}_Lightning Energy
    distance:
      name: ${name}_Lightning Distance
      id: ${name}_Lightning_Distance
######### rainsensors  hydreon############

  - platform: hydreon_rgxx
    uart_id: uart_1
    id: "hydreon_1"
    model: "RG_15"
    update_interval: 10s
    acc:
      name: "${name}_rain"
      icon: mdi:water-alert
    event_acc:
      name: "${name}_rain event"
      unit_of_measurement: "mm"
      icon: mdi:water  
      id: rain_meter     
    total_acc:
      name: "${name}_rain total"
      icon: mdi:water-sync
    r_int:
      name: "${name}_rain intensity"
      unit_of_measurement: "mm/h"
      id: ${name}_rain_intensity
    # moisture:
    #   name: "Rain Level"
    # temperature:
    #   name: "Device Temperature"
    # disable_led: false    



number:
  - platform: template
    name: ${name}_spike_rejection_number
    id: ${name}_spike_rejection_number
    optimistic: true
    icon: mdi:sine-wave
    min_value: 0
    max_value: 11
    step: 1
    initial_value: 5
    restore_value: true
    on_value:
      then:
        - lambda: |-
            esphome::as3935::AS3935Component *as =  id(as3935_id);
            as->write_spike_rejection(uint8_t(id(${name}_spike_rejection_number).state));

  - platform: template
    name: ${name}_noise_level_number
    id: ${name}_noise_level_number
    optimistic: true
    icon: mdi:sine-wave
    min_value: 0
    max_value: 7
    step: 1
    initial_value: 0
    restore_value: true
    on_value:
      then:
        - lambda: |-
            esphome::as3935::AS3935Component *as =  id(as3935_id);
            as->write_noise_level(uint8_t(id(${name}_noise_level_number).state));
  
  - platform: template
    name: ${name}_lightning_threshold_number
    id: ${name}_lightning_threshold_number
    optimistic: true
    icon: mdi:sine-wave
    min_value: 1
    max_value: 16
    step: 1
    initial_value: 1
    restore_value: true
    on_value:
      then:
        - lambda: |-
            esphome::as3935::AS3935Component *as =  id(as3935_id);
            as->write_lightning_threshold(uint8_t(id(${name}_lightning_threshold_number).state));
  
  - platform: template
    name: ${name}_watchdog_threshold_number
    id: ${name}_watchdog_threshold_number
    optimistic: true
    icon: mdi:sine-wave
    min_value: 0
    max_value: 15
    step: 1
    initial_value: 1
    restore_value: true
    on_value:
      then:
        - lambda: |-
            esphome::as3935::AS3935Component *as =  id(as3935_id);
            as->write_watchdog_threshold(uint8_t(id(${name}_watchdog_threshold_number).state));

interval:
  - interval: 1s
    then:
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_vitesse_vent).state))  < 5  ;
             
         then:
           -  light.turn_on: 
                id: ${name}_led1 
                brightness: 0%
                red: 0%
                blue: 0%
                green: 0% 
    - if:
         condition:
           and:
             - lambda: |-
                 return     (float(id(${name}_vitesse_vent).state))  >= 5  ;
             - lambda: |-
                 return   (float(id(${name}_vitesse_vent).state))  < 15  ;
             
         then:
           -  light.turn_on: 
                id: ${name}_led1 
                brightness: 15%
                red: 0%
                blue: 0%
                green: 100%
    - if:
         condition:
           and:
             - lambda: |-
                 return     (float(id(${name}_vitesse_vent).state))  >= 15  ;
             - lambda: |-
                 return   (float(id(${name}_vitesse_vent).state))  < 20  ;
             
         then:
           -  light.turn_on: 
                id: ${name}_led1 
                brightness: 20%
                red: 50%
                blue: 0%
                green: 100%            
    - if:
         condition:
           and:
             - lambda: |-
                 return     (float(id(${name}_vitesse_vent).state))  >= 20  ;
             - lambda: |-
                 return     (float(id(${name}_vitesse_vent).state))  < 50   ;
             
         then:
           -  light.turn_on: 
                id: ${name}_led1 
                brightness: 25%
                red: 100%
                blue: 0%
                green: 50%

    - if:
         condition:
           and:           
             - lambda: |-
                 return    (float(id(${name}_vitesse_vent).state))  >= 50  ;
  
         then:
           -  light.turn_on: 
                id: ${name}_led1 
                brightness: 50%
                red: 100%
                blue: 0%
                green: 0%
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_rain_intensity).state))  < 0.01  ;
         then:
           -  light.turn_on: 
                id: ${name}_led2 
                brightness: 0%
                red: 0%
                blue: 100%
                green: 0%
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_rain_intensity).state))  >= 0.01  ;
             - lambda: |-
                 return   (float(id(${name}_rain_intensity).state))  < 0.1  ;
         then:
           -  light.turn_on: 
                id: ${name}_led2 
                brightness: 15%
                red: 0%
                blue: 100%
                green: 0%
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_rain_intensity).state))  >= 0.10  ;
             - lambda: |-
                 return   (float(id(${name}_rain_intensity).state))  <1  ;    
         then:
           -  light.turn_on: 
                id: ${name}_led2 
                brightness: 20%
                red: 0%
                blue: 100%
                green: 0% 
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_rain_intensity).state))  >= 1  ;
             - lambda: |-
                 return   (float(id(${name}_rain_intensity).state))  < 5  ;
         then:
           -  light.turn_on: 
                id: ${name}_led2 
                brightness: 30%
                red: 0%
                blue: 100%
                green: 0%
    - if:
         condition:
           and:
             - lambda: |-
                 return  (float(id(${name}_rain_intensity).state)) >= 5  ;
             - lambda: |-
                 return  (float(id(${name}_rain_intensity).state)) < 20  ;
         then:
           -  light.turn_on: 
                id: ${name}_led2 
                brightness: 50%
                red: 0%
                blue: 100%
                green: 0%      
    - if:
         condition:
           and:
             - lambda: |-
                 return  (float(id(${name}_rain_intensity).state)) >= 20  ;
         then:
           -  light.turn_on: 
                id: ${name}_led2 
                brightness: 50%
                red: 100%
                blue: 100%
                green: 0%     
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_solar_radiation).state))  < 100  ;
         then:
           -  light.turn_on: 
                id: ${name}_led3 
                brightness: 15%
                red: 100%
                blue: 0%
                green: 0%

    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_solar_radiation).state))  >= 100  ;
             - lambda: |-
                 return   (float(id(${name}_solar_radiation).state))  < 200  ;
         then:
           -  light.turn_on: 
                id: ${name}_led3 
                brightness: 20%
                red: 100%
                blue: 0%
                green: 50%        
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_solar_radiation).state))  >= 200  ;
             - lambda: |-
                 return   (float(id(${name}_solar_radiation).state))  < 300  ;
         then:
           -  light.turn_on: 
                id: ${name}_led3 
                brightness: 20%
                red: 100%
                blue: 0%
                green: 80%        
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_solar_radiation).state))  >= 300  ;

         then:
           -  light.turn_on: 
                id: ${name}_led3 
                brightness: 20%
                red: 0%
                blue: 0%
                green: 100%
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  <0.001   ;
         then:
           -  light.turn_on: 
                id: ${name}_led4 
                brightness: 0%
                red: 0%
                blue: 0%
                green: 0%
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  >=0.001   ;
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  <0.006   ;
         then:
           -  light.turn_on: 
                id: ${name}_led4 
                brightness: 15%
                red: 0%
                blue: 0%
                green: 100%
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  >=0.006   ;
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  <0.145   ;
         then:
           -  light.turn_on: 
                id: ${name}_led4 
                brightness: 20%
                red: 100%
                blue: 0%
                green: 100%
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  >=0.145   ;
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  <0.180   ;
         then:
           -  light.turn_on: 
                id: ${name}_led4 
                brightness: 20%
                red: 100%
                blue: 0%
                green: 50%
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  >=0.180   ;
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  <0.270   ;
         then:
           -  light.turn_on: 
                id: ${name}_led4 
                brightness: 40%
                red: 100%
                blue: 0%
                green: 0%
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(${name}_uvindex).state))  >=0.270   ;
         then:
           -  light.turn_on: 
                id: ${name}_led4 
                brightness: 45%
                red: 100%
                blue: 75%
                green: 0%
    
                
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=200   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >100   ;
         then:
           -  light.turn_on: 
                id: ${name}_led5 
                brightness: 15%
                red: 0%
                blue: 0%
                green: 100%


    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=100   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >50   ;
         then:
           -  light.turn_on: 
                id: ${name}_led5 
                brightness: 20%
                red: 0%
                blue: 0%
                green: 100%
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=50   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >30   ;
         then:
           -  light.turn_on: 
                id: ${name}_led5 
                brightness: 25%
                red: 0%
                blue: 0%
                green: 100%

    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=30   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >20   ;
         then:
           -  light.turn_on: 
                id: ${name}_led5 
                brightness: 30%
                red: 0%
                blue: 0%
                green: 100%

    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=20   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >15   ;
         then:
           -  light.turn_on: 
                id: ${name}_led5 
                brightness: 30%
                red: 100%
                blue: 0%
                green: 100%

    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=15   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >10   ;
         then:
           -  light.turn_on: 
                id: ${name}_led5
                brightness: 30%
                red: 100%
                blue: 50%
                green: 50%

    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=10   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >5   ;
         then:
           -  light.turn_on: 
                id: ${name}_led5 
                brightness: 30%
                red: 100%
                blue: 49.8%
                green: 0%
    
    - if:
         condition:
           and:
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  <=5   ;
             - lambda: |-
                 return   (float(id(distance_eclaire).state))  >0   ;
         then:
            
          -  light.turn_on: 
               id: ${name}_led5 
               brightness: 50%
               red: 75%
               blue: 100%
               green: 0%


# display:
#   - platform: st7735
#     model: "INITR_18BLACKTAB"
#     reset_pin: GPIO33
#     cs_pin: GPIO15
#     dc_pin: GPIO27
#     rotation: 0
#     device_width: 128
#     device_height: 160
#     col_start: 0
#     row_start: 0
#     eight_bit_color: true
#     update_interval: 5s    
#     lambda: |-
#       it.printf(0, 0, id(my_font), "The sensor value is: %.1f", id(${name}_solar_radiation).state);
#       // If the sensor has the value 30.02, the result will be: "The sensor value is: 30.0"

# font:
#   - file: "fonts/Comic Sans MS.ttf"
#     id: my_font
#     size: 20